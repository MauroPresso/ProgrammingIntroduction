# -*- coding: utf-8 -*-
"""PPO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EHMx-aTHQiBWh5Kj82s7WhbKXRYbJEy1

# **PROGRAMACIÓN ORIENTADO A OBJETOS**

Podemos definir una clase vagamente como una Plantilla o modelo para crear a partir de ella ciertos Objetos. Esta plantilla es la que contiene la información; características y capacidades que tendrá el objeto que sea creado a partir de ella.

Así a su vez los objetos creados a partir de ella estarán agrupados en esa misma clase.

Ejemplito: Imagina que tienes una regla de esas con moldes para crear figuras geométricas perfectas. Pues algo así seria una clase; podes crear esa regla y definir en ella las características de cada figura que seria un objeto.

Crear un objeto a partir de una clase se denomina instanciar.
Entonces estos atributos pueden llamarse las características que nosotros definimos para ese objeto. Y métodos las tareas que son capaces de realizar!

Class Nombredelaclase (object): #Declaramos la clase nuestra

      def  __init__ (self, parámetros): #Constructor de la clase

      #Declaración de atributos


# El método constructor de las clases en Python (__init__)

Si hablamos de métodos de una clase puede existir diferentes tipos de ellos. Pero el mas importante es el método constructor; el cual dicho nombre hace referencia a inicializar los atributos del objeto creado a partir  de la clase que lo posea. Por supuesto no es necesario que este método exista dentro de una clase para que la clase exista. Pero si es necesario para indicarle al interprete de Python que cuando se Instancia un objeto a dicha clase debe asignarle los argumentos que nosotros le damos al momento de la instancia. (inicialización de atributos)

# Método INIT

Este método se escribe «__init__» y yo para recordarlo lo suelo asimilar con «inicializar». Una clase que posea este método creara el objeto con los «argumentos» para los atributos que se pasen al momento de la instancia.
El método __init__ NO RETORNA NINGÚN DATO Y ES OPCIONAL. Cuando decimos que no retorna ningún dato significa que a diferencia de otros métodos este no puede retornar valores luego de ejecutado.
Este método es llamado automáticamente al instanciar un objeto a la clase que tenga el constructor por lo que su uso es muy común y practico.

El método constructor permitirá asignar atributos cada vez que creemos un objeto a partir de esa clase haciéndolo obligatorio.
"""

## PRIMER EJERCICIO CREAR LA CLASE ALUMNO
class Alumnos():
    #definimos los atributos (características)
    #Id:estructura de base de datos. Clave principal de BDD
    #Este método se escribe “__init__”
    # y para recordarlo lo puede asociar con “inicializar”.
    #El self hace referencia al nombre del objeto en el que se encuentra escrito
    #SELF representa al objeto que se crea desde el modelo, desde la clase

    def _init_(self, id=0,nombre="",domicilio="",dni=0,edad=0):
        self.id=id
        self.nombre=nombre
        self.domicilio=domicilio
        self.dni=dni
        self.edad=edad

"""EJERCICIO 1a)
Crear la clase humano que contenga edad y nombre

"""

## creamos la clase humano

"""REPASEMOS
Clase: Plantilla o modelo a partir de la cual podemos crear objetos y donde se determinan los atributos (características) y métodos (acciones realizables) que tendrán.

Objeto: Normalmente creado a partir de una clase son entidades que almacenan información en forma de argumento para atributos y realizan acciones organizadas a través de métodos que permiten cambiar atributos o estados del objeto o de otros objetos de la clase.

Los atributos: Son variables de diferentes tipos (Entero; Texto; Booleanos) que pueden tener valores por defecto o le podrán ser asignadas al momento de la Instancia de un objeto determinando sus características y estado.

Los métodos: Son funciones; acciones realizables por el objeto que permiten cambiar sus atributos o el de otros objetos de la clase permitiendo un cambio de estado del objeto; a menudo requiriendo «argumentos (valores)» para determinados «parámetros (nombres de variables establecidas en funciones o rutinas).

Instancia: Palabra que refiere a la creación de un objeto partiendo de una clase. Durante la instancia son asignados los valores iniciales para los atributos.

EJERCICIO 1b)
Para este ejemplo usaremos el mismo código anterior. En el código anterior (COPIAR Y PEGAR), EJERCICIO 1a) ya teníamos dos atributos. Edad y Nombre; ahora vamos a agregar un tercer atributo «Ocupacion»
"""

## Resolución ejercicio 1B)

"""# Añadiendo un nuevo método de instancia
Ya hablamos del método constructor. Ahora vamos a hablar de los métods

Entonces en nuestro código anterior yo quisiera agregar un método para retornar el valor de cada argumento de mi objeto Persona1. Y vemos que al ejecutar....NO HACE NADA!. Si ejecutas el código en consola no obtienes error de sintaxis pero tampoco obtienes ninguna salida!.
 Vamos a crear un método de clase que al ejecutarlo nos devuelva toda la información de nuestro objeto.

Para crear un método lo hacemos a través de la palabra reservada def (al igual que las funciones o como la utilizamos para crear nuestro método constructor). Seguido a ella el nombre del método y luego entre paréntesis los parámetros; finalmente dos puntos «:» y continuamos debajo identando.

"""

#Definición de la clase Alumnos
#Con sus atributos y métodos
#METODO AGREGAR
class Alumnos():
    #definimos los atributos (características)
    #Id:estructura de base de datos. Clave principal de BDD
    #Este método se escribe “__init__”
    # y para recordarlo lo puede asociar con “inicializar”.
    #El self hace referencia al nombre del objeto en el que se encuentra escrito
    #SELF representa al objeto que se crea desde el modelo, desde la clase

    def __init__(self, id=0,nombre="",domicilio="",dni=0,edad=0):
        self.id=id
        self.nombre=nombre
        self.domicilio=domicilio
        self.dni=dni
        self.edad=edad
    #def__init__ definimos los atributos de la clase
    def Agregar(self):
        print("Estamos agregando al alumno: ",self.nombre,self.domicilio)
    def Eliminar(self):
        print("Acabamos de eliminar al alumno: ",self.nombre,self.domicilio)

Alumno1=Alumnos(0,"Juan Perez","Cipolletti")
Alumno2=Alumnos(1,"Carlos García","Neuquén")
Alumno3=Alumnos(2,"Andrea Fernandez","Gral Roca")
#ejecuto el método Agregar
#Alumno1 está vinculado a todos los comportamientos
#por qué? porque creamos una instancia en Alumnos1
#que es una copia de la clase Alumnos
Alumno1.Agregar()
Alumno3.Agregar()
Alumno2.Eliminar()

"""EJERCICIO 1C)
Agregar el método presentar de manera tal que aparezca como se muestra a continuación

*Hola soy Pedro, mi edad es 31 y mi ocupación es Desocupado*
"""

#CODIGO EJERCICIO 1C)

"""EJERCICIO 1D) Agregar los metodo Agregar y eliminar. Crear 3 objetos

"""



"""EJERCICIO 1E) Crear la clase computadora con atributos (4) y métodos (2).
Instanciar 3 objetos
Ejecutar los métodos

"""

